"""
Django settings for mi_aplicacion project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path

import dj_database_url 
from dotenv import load_dotenv
load_dotenv() 

try:
    import sys
    import types
    from hacks_compatibilidad.django_utils_compat import datetime_safe as _datetime_safe

    module_name = "django.utils.datetime_safe"
    if module_name not in sys.modules:
        m = types.ModuleType(module_name)
        # Exponer las funciones esperadas por Whoosh/Haystack
        m.date = _datetime_safe.new_date
        m.datetime = _datetime_safe.new_datetime
        sys.modules[module_name] = m
except Exception:
    # no bloquear el arranque si hay algún problema con el shim
    pass

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "dev-secret-key")

HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.whoosh_backend.WhooshEngine',
        'PATH': str(BASE_DIR / 'whoosh_index'),
    },
}
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    #Apps locales
    'users',

    'cloudinary_storage',
    'cloudinary',   
    'haystack',
    'search.apps.SearchConfig',
    'bullet_journal',
    
    #Third party apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

]

SITE_ID = 1
# Configuración de autenticación
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Configuración de allauth
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True  # ← Email único
ACCOUNT_PREVENT_ENUMERATION = False  # Para mostrar errores específicos
SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'
SOCIALACCOUNT_QUERY_EMAIL = True  # trae email del perfil de Google

# Si querés simplificar el signup normal
ACCOUNT_SIGNUP_FIELDS = ['email*', 'username*', 'password1*', 'password2*']
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = False

# Configuración de registro y login
#ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True  # Confirmar email dos veces
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True  # Login automático tras verificar
ACCOUNT_LOGOUT_ON_GET = False  # Requiere POST para logout

# Configuración de login y logout
#SOCIALACCOUNT_EMAIL_VERIFICATION = 'none'  # Google ya verifica
#ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True  # Login automático tras verificar
#ACCOUNT_LOGOUT_ON_GET = False  # Requiere POST para logout

# URLs
LOGIN_URL = '/login/'  # ← USAR ALLAUTH URLs
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# Configurar allauth para usar tus vistas
ACCOUNT_LOGIN_URL = '/login/'
ACCOUNT_SIGNUP_URL = '/signup/'

# Configuración de Google OAuth
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID', default=''),
            'secret': os.environ.get('GOOGLE_CLIENT_SECRET', default=''),  
            'key': ''
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        'OAUTH_PKCE_ENABLED': True,
    }
}




MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'allauth.account.middleware.AccountMiddleware',    
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

if 'RENDER' in os.environ:
    MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')

ROOT_URLCONF = 'just_a_student.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # tus templates globales
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',  # necesario para admin
                'django.contrib.auth.context_processors.auth',  # necesario para admin
                'django.contrib.messages.context_processors.messages',  # necesario para admin
            ],
        },
    },
]


if 'RENDER' in os.environ:
    DEBUG = False
    ALLOWED_HOSTS = [os.environ.get('RENDER_EXTERNAL_HOSTNAME')]
else:
    DEBUG = True
    ALLOWED_HOSTS = ['127.0.0.1', 'localhost']



WSGI_APPLICATION = 'just_a_student.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': BASE_DIR / 'db.sqlite3',
#    }
#}


#DATABASES = {
   # 'default': dj_database_url.config(
  #      default="postgresql://just_a_student_database_user:EB8BWe6CshrP3CJZa2KmPudjuxI0G0lP@dpg-d2iera0gjchc73co2a50-a/just_a_student_database"
 #   )
#}

DATABASES = {
    'default': dj_database_url.config(
        default=f"sqlite:///{BASE_DIR}/db.sqlite3",
        conn_max_age=600
    )
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'

STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'




#MEDIA_URL = '/media/' 
MEDIA_URL = '/media/journal_images/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')




if 'RENDER' in os.environ:
    DATABASES = {'default': dj_database_url.config(conn_max_age=600)}

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Configuración de almacenamiento
if 'RENDER' in os.environ:
    STORAGES = {
        "default": {"BACKEND": "cloudinary_storage.storage.MediaCloudinaryStorage"},
        "staticfiles": {"BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage"},
    }
else:
    STORAGES = {
        "default": {"BACKEND": "django.core.files.storage.FileSystemStorage"},
        "staticfiles": {"BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage"},
    }

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.environ.get("CLOUDINARY_CLOUD_NAME"),
    'API_KEY': os.environ.get("CLOUDINARY_API_KEY"),
    'API_SECRET': os.environ.get("CLOUDINARY_API_SECRET")
}


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ----------------------------
# Email (SMTP) para usuarios normales
# ----------------------------
if 'RENDER' in os.environ:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # o SendGrid si lo configuran
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = 'justastudentucse@gmail.com'
    EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
    DEFAULT_FROM_EMAIL = 'Just a Student <justastudentucse@gmail.com>'

# Forzar HTTPS en enlaces de confirmación
ACCOUNT_DEFAULT_HTTP_PROTOCOL = "https"

import os
SITE_ID = 1
SITE_DOMAIN = os.environ.get('SITE_DOMAIN', 'localhost:8000')


# Configuración del dominio
SITE_ID = 1

if 'RENDER' in os.environ:
    SITE_DOMAIN = 'tp-ingweb-2025.onrender.com'
else:
    SITE_DOMAIN = 'localhost:8000'

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https' if 'RENDER' in os.environ else 'http'

# ----------------------------
# Email para producción y local
# ----------------------------
import os

if 'RENDER' in os.environ:  # producción
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "smtp.sendgrid.net"
    EMAIL_PORT = 587
    EMAIL_USE_TLS = True
    EMAIL_HOST_USER = "apikey"
    EMAIL_HOST_PASSWORD = os.environ.get("SENDGRID_API_KEY")
    DEFAULT_FROM_EMAIL = os.environ.get(
        "DEFAULT_FROM_EMAIL", "Just a Student <justastudentucse@gmail.com>"
    )
    DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL", "Just a Student <justastudentucse@gmail.com>")
    SITE_DOMAIN = os.environ.get("SITE_DOMAIN", "tp-ingweb-2025.onrender.com")
else:  # local
    EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # imprime mails en consola
    SITE_DOMAIN = "localhost:8000"
    EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
    EMAIL_HOST = "smtp.gmail.com"
    EMAIL_PORT = 465
    EMAIL_USE_SSL = True
    EMAIL_HOST_USER = "justastudentucse@gmail.com"
    EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
    DEFAULT_FROM_EMAIL = "Just a Student <justastudentucse@gmail.com>"
    SITE_DOMAIN = os.environ.get("SITE_DOMAIN", "localhost:8000")

